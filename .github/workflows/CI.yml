name: CI

on:
  # Allow manual triggering of the workflow
  workflow_dispatch:
  # Trigger on push to main or tags matching v*
  push:
    branches:
      - "main"
    tags:
      - release*
  pull_request:
    branches:
      - main

env:
  DOCKER_BUILDKIT: 1
  TARGET_PLATFORMS: linux/amd64,linux/arm64
  REGISTRY: ghcr.io
  IMAGE_NAME: kcworks
  RELEASE_VERSION: unset
jobs:
  build_and_release:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Get release version
        id: get_release_version
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          # Remove 'release-' prefix if present, otherwise use the full ref name
          release_version=$(echo ${{ github.ref_name }} | sed 's/^release-//')
          echo "Building release version: $release_version"
          echo "RELEASE_VERSION=${release_version}" >> $GITHUB_ENV
        shell: bash
      - name: Label latest
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          echo "RELEASE_VERSION=latest" >> $GITHUB_ENV

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}


      # Checks-out your repository under $GITHUB_WORKSPACE
      - name: Checkout
        uses: actions/checkout@v3

      # Set up Python 3.9 environment
      - name: Set up Python 3.9
        uses: actions/setup-python@v1
        with:
          python-version: "3.9"

      # Cache docker images so they don't rebuild every time
      # - name: Cache Local Images
      #   id: local-images
      #   uses: actions/cache@v3
      #   with:
      #     path: /var/lib/docker/
      #     key: local-docker-directory

      - name: Build Image
        run: |
          docker build . --file Dockerfile --platform=linux/amd64 --tag $REGISTRY/$IMAGE_NAME:$RELEASE_VERSION

      - name: If release version is numbered, tag it as latest as well
        if: env.RELEASE_VERSION != 'latest'
        run: |
          docker tag $REGISTRY/$IMAGE_NAME:$RELEASE_VERSION $REGISTRY/$IMAGE_NAME:latest

      - name: Push Image
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        run: |
          docker push $DOCKERHUB_USERNAME/$IMAGE_NAME:$RELEASE_VERSION
          docker push $DOCKERHUB_USERNAME/$IMAGE_NAME:latest

      - name: Start containers
        run: |
          # Create an empty .env file since the dev compose project expects
          # one
          touch .env
          docker compose --file docker-compose.dev.yml up -d

      # - name: Run unit tests
      #   run: cd site && pytest

      - name: Destroy containers
        if: always()
        run: |
          docker compose --file docker-compose.dev.yml down

      - name: Remove the Docker image with version number
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        run: docker rmi $DOCKERHUB_USERNAME/$IMAGE_NAME:$RELEASE_VERSION

      - name: Remove the Docker image with latest tag
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        run: docker rmi $DOCKERHUB_USERNAME/$IMAGE_NAME:latest

      - name: Remove the local image
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        run: docker rmi $DOCKERHUB_USERNAME/$IMAGE_NAME:$RELEASE_VERSION

      - name: Prune Docker
        run: docker system prune -af

